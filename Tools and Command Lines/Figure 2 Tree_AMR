R
#Figure 2A

library(ggtree)
library(ggplot2)
library(RColorBrewer)
library(dplyr)

tree = read.tree("resultnewick.tre")
dd <- read.csv("Phylogenetic_tree_metadata_20230904.csv", header=TRUE)

ST = read.csv("csv_ST.csv")
rnames = ST$ID
ST = ST %>% select (-ID)
rownames(ST) = rnames
ST = as.matrix(ST)

Set1 = brewer.pal(9, "Set1")
Set2 = brewer.pal(12, "Set2")
#palette1
palette1 = Set1[3:1]
#palette2
palette2 = Set1[4]
#palette3p2
palette3 = Set1[9]
#palette4
palette4 = Set2[1:2]
#palette5
palette5 = Set1[8:7]
#combined palette
combined_palette = c(palette1, palette2, palette3, palette4, palette5)
my_colors = brewer.pal(8, "Set2")

p1 <- ggtree(tree, layout="fan", branch.length="none") %<+% dd + geom_tiplab(size=1.3, aes(color=Location), offset = 0.4) + geom_tippoint(aes(color=Location)) + scale_color_manual(values = combined_palette) + guides(color = guide_legend(override.aes = list(size = 5))) 

p2 = p1 + geom_hilight(node=210, fill=my_colors[2]) + geom_hilight(node=238, fill=my_colors[3]) + geom_hilight(node=294, fill=my_colors[4]) + geom_hilight(node=271, fill=my_colors[5]) + geom_hilight(node=283, fill=my_colors[6])

p3 = gheatmap(p2, ST, offset = 0, width = 0.03, colnames = FALSE, legend_title = "Sequence Type")

p3 + 
  geom_cladelab(node=238, label="E", align=TRUE, geom='label', fill='#B60F23', alpha = .5, offset = -3, textcolor='white', barsize=0, fontsize=5) +
  geom_cladelab(node=210, label="D", align=TRUE, geom='label', fill='#B60F23', alpha = .5, offset = -3, textcolor='white', barsize=0, fontsize=5, hjust=0, vjust=1, offset.text = -1) +
  geom_cladelab(node=294, label="C", align=TRUE, geom='label', fill='#B60F23', alpha = .5, offset = -3, textcolor='white', barsize=0, fontsize=5, hjust=0, vjust=1, offset.text = -1) +
  geom_cladelab(node=271, label="B", align=TRUE, geom='label', fill='#B60F23', alpha = .5, offset = -3, textcolor='white', barsize=0, fontsize=5) +
  geom_cladelab(node=283, label="A", align=TRUE, geom='label', fill='#B60F23', alpha = .5, offset = -3, textcolor='white', barsize=0, fontsize=5)

#save the high-resolution figure
quartz.save(file = "Fantree_ST_20231128.pdf", type = "pdf", dpi = 1200)


#Figure 2B
scatterpiedata = read.csv("Scatterpie_input_20231011.csv")
bardata = t(scatterpiedata)
bardata2 = bardata[-c(1,2,3),]
column_names = c("Hong Kong", "China: Hanzhong", "Taiwan", "United Kingdom", "Canada", "USA", "Australia", "South Africa")
row_names = c("Unclassified", "Cluster A", "Cluster B", "Cluster C", "Cluster D", "Cluster E")
colnames(bardata2) = column_names
rownames(bardata2) = row_names
Cluster_colours = c("white", "#FFD92F", "#A6D854", "#E78AC3", "#FC8D62", "#8DA0CB")

barplot(bardata2, xlab = "Location", ylab = "Number", col = Cluster_colours)
legend("topright", row_names, cex = 1.5, fill = Cluster_colours)

#save the high-resolution figure
quartz.save(file = "PG_cluster_bar_A_20231013.jpg", type = "jpeg", dpi = 1200)


#Figure 2C
library(pacman)
p_load(assertthat,tidyverse,ggraph,igraph,ggmap,scatterpie,RColorBrewer)

nodes = read.csv("LonLatrmHKlabel.csv")
edges = read.csv("edges.csv")

edges <- edges%>%mutate(category=as.factor(category))
edges_for_plot <- edges%>%
  inner_join(nodes%>%select(id, lon, lat),by=c("from"="id"))%>%
  rename(x=lon, y=lat)%>%
  inner_join(nodes%>%select(id,lon,lat),by=c("to"="id"))%>%
  rename(xend=lon,yend=lat)
assert_that(nrow(edges_for_plot)==nrow(edges))

#Map sea
maptheme <- theme(
   panel.grid = element_blank(),
   axis.text = element_blank(),
   axis.ticks = element_blank(),
   axis.title = element_blank(),
   legend.position = "right",
   panel.background = element_rect(fill="#B9E3F9"),
   plot.margin = unit(c(0,0,0.5,0),"cm")
 )

#Map continents
m = map_data("world")
p = c("China", "Taiwan", "Australia", "South Africa", "UK", "USA", "Canada")
country_shape <- geom_polygon(aes(x=long, y=lat, group=group),
                              data=map_data("world"),
                              fill = ifelse(m$region %in% p, "#BEF75B", "white"), color="#515151",linewidth=0.2)

#Map dimension
mapcoords <- coord_fixed(xlim=c(-150,180), ylim=c(-55,80))

Set1 = brewer.pal(9, "Set1")
Set2 = brewer.pal(12, "Set2")
#palette1[1,2,3]
palette1 = Set1[3:1]
#palette2[4]
palette2 = Set1[4]
#palette3[5]
palette3 = Set1[9]
#palette4[6,7]
palette4 = Set2[1:2]
#palette5[8,9]
palette5 = Set1[8:7]
#combined palette
combined_palette = c(palette1, palette2, palette3, palette4, palette5)
map_curve_colour = c(combined_palette[3], combined_palette[7], combined_palette[9], combined_palette[2], combined_palette[8], combined_palette[1], combined_palette[6])
my_colours1 = brewer.pal(9, "Set1")
my_colours2 = brewer.pal(11, "PiYG")
my_colours3 = brewer.pal(8, "Accent")
my_colours4 = brewer.pal(9, "Pastel1")
piechartcolour = c(my_colours4[1], my_colours1[2], my_colours1[4:7], my_colours2[11], my_colours3[8], my_colours3[6], "#7D79FA", "#01D158")

scatterpiedata = read.csv("AMR_Location_Phenotype_ready2.csv")
ggplot(nodes) + country_shape +
  geom_scatterpie(data = scatterpiedata, aes(x=longitude, y=latitude, r=13), cols = c("Aminoglycoside", "Beta.lactam", "Colistin", "Lincosamide", "Phenicol", "Phosphonic", "Quinolone", "Rifampicin", "Sulfonamide", "Tetracycline", "Trimethoprim"), color="black", alpha=.85) + scale_fill_manual(values = piechartcolour, labels = c("Aminoglycoside", "Beta-lactam", "Colistin", "Lincosamide", "Phenicol", "Phosphonic", "Quinolone", "Rifampicin", "Sulfonamide", "Tetracycline", "Trimethoprim")) +
  geom_curve(aes(x=x,y=y,xend=xend,yend=yend,color=category),
             data=edges_for_plot,curvature = 0.33,alpha=0.5, size = 1.8) + scale_color_manual(values = map_curve_colour) +
  scale_size_continuous(guide = FALSE,range = c(0.25,2))+ 
  geom_point(aes(x=lon,y=lat),  # draw nodes
             shape=21,fill="white",color="black",stroke=0.5)+
  scale_size_continuous(guide = FALSE, range = c(1,6))+
  geom_text(aes(x=lon,y=lat,label=name), # draw text labels
            hjust=1,vjust =0, nudge_x = 2.5,nudge_y = 2.5,
            size=4,color="black",fontface="bold")+
  mapcoords + maptheme + guides(color = "none") + labs(fill = "AMR Phenotypes")

#save the high-resolution figure
quartz.save(file = "AMR_Map_20231010_revised.jpg", type = "jpeg", dpi = 1200)
